type ValidationResult = 
 variant {
   err: text;
   ok;
 };
type UserType = 
 variant {
   admin;
   patient;
   therapist;
 };
type UserProfileUpdates = 
 record {
   department: opt text;
   email: opt text;
   firstName: opt text;
   isActive: opt bool;
   lastName: opt text;
 };
type UserProfile = 
 record {
   createdAt: int;
   department: opt text;
   email: text;
   firstName: text;
   id: UserId;
   isActive: bool;
   lastLogin: opt int;
   lastName: text;
   updatedAt: int;
   userType: UserType;
 };
type UserId = principal;
type SystemHealth = 
 record {
   backend_status: CanisterStatus;
   last_health_check: int;
   mvt_token_status: CanisterStatus;
 };
type Result_2 = 
 variant {
   err: text;
   ok: record {
         id: UserId;
         role: text;
       };
 };
type Result_1 = 
 variant {
   err: text;
   ok: text;
 };
type Result = 
 variant {
   err: text;
   ok: UserProfile;
 };
type CanisterStatus = 
 variant {
   active;
   error: text;
   inactive;
 };
service : {
  getCanisterIds: () -> (vec record {
                               text;
                               principal;
                             });
  getCurrentUser: () -> (Result_2);
  getPatientData: (_patientId: principal) -> (Result_1);
  getSystemHealth: () -> (SystemHealth);
  initialize: () -> (Result_1);
  isSystemInitialized: () -> (bool);
  processPayment: (amount: nat, serviceType: text) -> (Result_1);
  registerUser: (userData:
   record {
     email: text;
     firstName: text;
     lastName: text;
     userType: UserType;
   }) -> (Result_1);
  sanitizeText: ("text": text) -> (text) query;
  sendSecureMessage: (recipientId: principal, message: text) -> (Result_1);
  setMVTTokenCanister: (canisterId: principal) -> (Result_1);
  setSecureMessagingCanister: (canisterId: principal) -> (Result_1);
  storePatientData: (_patientId: UserId, _data: text) -> (Result_1);
  updateUserProfile: (updates: UserProfileUpdates) -> (Result);
  validateEmail: (email: text) -> (ValidationResult) query;
}
