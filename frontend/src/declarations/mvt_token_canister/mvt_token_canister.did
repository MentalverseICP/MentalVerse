type TxIndex = nat;
type TransferResult = 
 variant {
   err: TransferError;
   ok: TxIndex;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: nat;
   created_at_time: opt Timestamp;
   fee: opt nat;
   from_subaccount: opt vec nat8;
   memo: opt vec nat8;
   to: Account;
 };
type Transaction = 
 record {
   index: TxIndex;
   operation:
    variant {
      burn: record {
              amount: nat;
              from: Account;
            };
      earn: record {
              amount: nat;
              earning_type: EarningType;
              to: Account;
            };
      mint: record {
              amount: nat;
              to: Account;
            };
      spend: record {
               amount: nat;
               from: Account;
               spending_type: SpendingType;
             };
      stake: record {
               amount: nat;
               from: Account;
               lock_period: Duration;
             };
      transfer: record {
                  amount: nat;
                  fee: nat;
                  from: Account;
                  to: Account;
                };
      unstake: record {
                 amount: nat;
                 reward: nat;
                 to: Account;
               };
    };
   timestamp: Timestamp;
 };
type Timestamp = nat64;
type StakeInfo = 
 record {
   amount: nat;
   last_reward_claim: int;
   lock_period: Duration;
   reward_rate: float64;
   staked_at: int;
 };
type SpendingType = 
 variant {
   advanced_features;
   ai_insights;
   extended_storage;
   premium_consultation;
   priority_booking;
   telemedicine;
 };
type SpendingRecord = 
 record {
   amount: nat;
   description: text;
   spending_type: SpendingType;
   timestamp: int;
   user_id: principal;
 };
type Result_2 = 
 variant {
   err: text;
   ok: TxIndex;
 };
type Result_1 = 
 variant {
   err: text;
   ok;
 };
type Result = 
 variant {
   err: text;
   ok: nat;
 };
type EarningType = 
 variant {
   appointment_completion;
   doctor_consultation;
   patient_feedback;
   platform_usage;
   referral_bonus;
   staking_reward;
   system_participation;
 };
type EarningRecord = 
 record {
   amount: nat;
   description: text;
   earning_type: EarningType;
   timestamp: int;
   user_id: principal;
 };
type Duration = nat64;
type Account = 
 record {
   owner: principal;
   subaccount: opt vec nat8;
 };
service : {
  add_authorized_canister: (canister_id: principal) -> (Result_1);
  burn_tokens: (from: Account, amount: nat) -> (Result_2);
  claim_staking_rewards: (user: principal) -> (Result);
  distribute_daily_rewards: () -> (Result);
  earn_tokens: (user: principal, earning_type: EarningType, custom_amount:
   opt nat) -> (Result_2);
  enhanced_burn_tokens: (from: Account, amount: nat, reason: text) ->
   (Result_2);
  get_canister_call_stats: () -> (vec record {
                                        principal;
                                        nat;
                                      }) query;
  get_earning_rates: () ->
   (record {
      appointment_completion: nat;
      doctor_consultation_fee: nat;
      patient_feedback: nat;
      platform_usage_daily: nat;
      referral_bonus: nat;
      system_participation: nat;
    }) query;
  get_reward_eligibility: (user: principal) -> (bool) query;
  get_spending_costs: () ->
   (record {
      advanced_features_monthly: nat;
      ai_insights: nat;
      extended_storage_monthly: nat;
      premium_consultation: nat;
      priority_booking: nat;
      telemedicine_session: nat;
    }) query;
  get_staking_info: () ->
   (record {
      lock_periods: vec record {
                          Duration;
                          float64;
                        };
      min_stake_amount: nat;
    }) query;
  get_transaction_history: (start: opt TxIndex, limit: opt nat) ->
   (vec Transaction) query;
  get_user_activity_status: (user: principal) -> (opt int) query;
  get_user_earning_history: (user: principal) -> (vec EarningRecord) query;
  get_user_spending_history: (user: principal) -> (vec SpendingRecord) query;
  get_user_stake: (user: principal) -> (opt StakeInfo) query;
  health_check: () ->
   (record {
      status: text;
      total_accounts: nat;
      total_supply: nat;
    }) query;
  icrc1_balance_of: (account: Account) -> (nat) query;
  icrc1_decimals: () -> (nat8) query;
  icrc1_fee: () -> (nat) query;
  icrc1_metadata: () ->
   (vec record {
          text;
          variant {
            Nat: nat;
            Text: text;
          };
        }) query;
  icrc1_minting_account: () -> (opt Account) query;
  icrc1_name: () -> (text) query;
  icrc1_symbol: () -> (text) query;
  icrc1_total_supply: () -> (nat) query;
  icrc1_transfer: (args: TransferArgs) -> (TransferResult);
  mark_user_active: (user: principal) -> (Result_1);
  mint_tokens: (to: Account, amount: nat) -> (Result_2);
  spend_tokens: (user: principal, spending_type: SpendingType, custom_amount:
   opt nat) -> (Result_2);
  stake_tokens: (user: principal, amount: nat, lock_period: Duration) ->
   (Result_1);
  unstake_tokens: (user: principal) -> (Result);
}
